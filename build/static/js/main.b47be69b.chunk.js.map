{"version":3,"sources":["components/SideDrawer/DrawerToggleButton.js","components/Toolbar/Toolbar.js","components/SideDrawer/SideDrawer.js","components/Backdrop/Backdrop.js","App.js","serviceWorker.js","index.js"],"names":["drawerToggleButton","props","className","onClick","click","toolbar","drawerClickHandler","href","sideDrawer","drawerClasses","show","backdrop","App","state","sideDrawerOpen","drawerToggleClickHandler","setState","prevState","backdropClickHandler","this","style","height","marginTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6UAeeA,G,YAVY,SAAAC,GAAK,OAC9B,4BAAQC,UAAY,gBAAeC,QAAWF,EAAMG,OAClD,yBAAKF,UAAY,uBACjB,yBAAKA,UAAY,uBACjB,yBAAKA,UAAY,0BCcNG,EAnBC,SAAAJ,GAAK,OACnB,4BAAQC,UAAY,WAClB,yBAAKA,UAAY,sBACf,yBAAKA,UAAU,yBACb,kBAAC,EAAD,CAAoBE,MAASH,EAAMK,sBAErC,yBAAKJ,UAAY,gBAAe,uBAAGK,KAAO,KAAV,kBAChC,yBAAKL,UAAY,WACjB,yBAAKA,UAAY,4BACf,4BACE,4BAAI,uBAAGK,KAAK,KAAR,aACJ,4BAAI,uBAAGA,KAAK,KAAR,eCQCC,G,MApBI,SAAAP,GACjB,IAAIQ,EAAgB,cAIpB,OAHGR,EAAMS,OACPD,EAAgB,oBAGlB,yBAAKP,UAAaO,GAChB,4BACE,4BACE,uBAAGF,KAAO,KAAV,aAEF,4BACE,uBAAGA,KAAO,KAAV,cCNOI,G,YALE,SAAAV,GAAK,OACpB,yBAAKC,UAAY,WAAWC,QAAWF,EAAMG,UCwChCQ,E,4MArCbC,MAAQ,CACNC,gBAAgB,G,EAGlBC,yBAA2B,WACzB,EAAKC,UAAS,SAACC,GACb,MAAO,CAACH,gBAAiBG,EAAUH,oB,EAKvCI,qBAAuB,WACrB,EAAKF,SAAS,CAACF,gBAAiB,K,uDAKhC,IAAIH,EAIJ,OAHGQ,KAAKN,MAAMC,iBACZH,EAAW,kBAAC,EAAD,CAAUP,MAASe,KAAKD,wBAGnC,yBAAKE,MAAS,CAACC,OAAQ,QAAQnB,UAAY,OACvC,kBAAC,EAAD,CAASI,mBAAsBa,KAAKJ,2BACpC,kBAAC,EAAD,CAAYL,KAAQS,KAAKN,MAAMC,iBAC9BH,EACD,0BAAMS,MAAS,CAACE,UAAW,SACzB,8D,GA5BMC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b47be69b.chunk.js","sourcesContent":["import React from 'react';\n\nimport './DrawerToggleButton.css';\n\n\nconst drawerToggleButton = props => (\n  <button className = \"toggle-button\"onClick = {props.click}>\n    <div className = \"toggle-button_line\"/>\n    <div className = \"toggle-button_line\"/>\n    <div className = \"toggle-button_line\"/>\n  </button>\n\n);\n\n\nexport default drawerToggleButton;","import React from 'react';\nimport './Toolbar.css';\nimport DrawerToggleButton from '../SideDrawer/DrawerToggleButton';\n\nconst toolbar = props => (\n  <header className = \"toolbar\">\n    <nav className = \"toolbar_navigation\">\n      <div className='toolbar_toggle-button'>\n        <DrawerToggleButton click = {props.drawerClickHandler} />\n      </div>\n      <div className = \"toolbar_logo\"><a href = \"/\">THE LOGO HERE</a></div>\n      <div className = \"spacer\" />\n      <div className = \"toolbar_navigation-items\">\n        <ul>\n          <li><a href=\"/\">Products</a></li>\n          <li><a href=\"/\">Users</a></li>\n        </ul>\n      </div>\n    </nav>\n  </header>\n);\n\n\nexport default toolbar;","import React from 'react';\nimport './SideDrawer.css';\n\nconst sideDrawer = props => {\n  let drawerClasses = 'side-drawer';\n  if(props.show){\n    drawerClasses = 'side-drawer open';\n  }\n  return(\n  <nav className = {drawerClasses}>\n    <ul>\n      <li>\n        <a href = '/'>Products</a>\n          </li>\n      <li>\n        <a href = '/'>Users</a>\n        </li>\n    </ul>\n  </nav>\n  );\n};\n\n\nexport default sideDrawer;","import React from 'react';\nimport './Backdrop.css';\n\n\nconst backdrop = props => (\n  <div className = \"backdrop\" onClick = {props.click} />\n);\n\n\nexport default backdrop;","import React, { Component } from 'react';\n\nimport Toolbar from './components/Toolbar/Toolbar';\nimport SideDrawer from './components/SideDrawer/SideDrawer';\nimport './App.css';\nimport Backdrop from './components/Backdrop/Backdrop';\n\nclass App extends Component {\n  state = {\n    sideDrawerOpen: false\n  };\n\n  drawerToggleClickHandler = () => {\n    this.setState((prevState) => {\n      return {sideDrawerOpen: !prevState.sideDrawerOpen}\n    });\n  };\n\n\n  backdropClickHandler = () => {\n    this.setState({sideDrawerOpen : false})\n  };\n\n  render() {\n    \n    let backdrop;\n    if(this.state.sideDrawerOpen){\n      backdrop = <Backdrop click = {this.backdropClickHandler}/>\n    }\n    return (\n      <div style = {{height: '100%'}}className = \"App\">\n          <Toolbar drawerClickHandler = {this.drawerToggleClickHandler} />\n          <SideDrawer show = {this.state.sideDrawerOpen}/>\n          {backdrop}\n          <main style = {{marginTop: '64px'}}>\n            <p>This is the page content!</p>\n\n          </main>\n          \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}